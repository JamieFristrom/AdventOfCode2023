#include <gtest/gtest.h>

#include <algorithm>
#include <format>
#include <queue>
#include <unordered_set>
#include <string>

#include "pex.h"

using namespace pex;
using namespace std::string_literals;

const std::vector<Vec2> dirs{ {0,-1}, {1,0}, {0,1}, {-1,0} };  // never eat shredded wheat



using CharGrid = std::vector<std::vector<char>>;

struct Node {
    std::vector<std::pair<Vec2,int64_t>> edges;
    bool visited;
};


std::ostream& operator<<(std::ostream& os, const Node& node) {
    os << '{' << std::endl;
    for (cauto& edge : node.edges) {
        os << "  " << edge << std::endl;
    }
    os << '}';
    return os;
}

using Graph = std::unordered_map<Vec2, Node>;

//using Graph = std::map<std::pair<Vec2, Vec2>, Node

std::ostream& operator<<(std::ostream& os, const Graph& graph) {
    for (cauto& node: graph) {
        os << node << std::endl;
    }
    return os;
}

bool rightWay(const char cell, const Vec2& dir) {
    return((cell == '.')
        || (cell == '^' && (dir == Vec2{0, -1}))
        || (cell == '>' && (dir == Vec2{1, 0}))
        || (cell == 'v' && (dir == Vec2{0, 1}))
        || (cell == '<' && (dir == Vec2{-1, 0})));
}

void nodify(
    Graph& graph,
    CharGrid& coverage,
    const CharGrid& grid,
    const Vec2& lastCell,
    const Vec2& cell,
    const Vec2& destination) {

    Vec2 lastTraveler = lastCell;
    Vec2 traveler = cell;
    int cost = 1;
    for (;;cost++) {

        coverage[traveler.y][traveler.x] = 'O';
        std::vector<Vec2> nextSteps;
        for (cauto& dir : dirs) {
            cauto nextStep = traveler + dir;
            if (nextStep != lastTraveler) {
                if (inBounds(grid, nextStep)) {
                    cauto cell = grid[nextStep.y][nextStep.x];
                    if (cell != '#') {
                        if (rightWay(cell, dir)) {
                            if (graph.contains(nextStep)) {
                                // already hit once, or final node
                                graph[lastCell].edges.emplace_back(std::pair{ nextStep, cost + 1 });
                                return;
                            }
                            else {
                                nextSteps.emplace_back(nextStep);
                            }
                        }
                    }
                }
            }
        }
        if(nextSteps.size()==0) {
            // dead end. I think we can just discard this path
            break;
        }
        else if(nextSteps.size()==1) {
            lastTraveler = traveler;
            traveler = nextSteps[0];
        }
        else {
            graph[traveler] = Node{};
            graph[lastCell].edges.emplace_back(std::pair{ traveler, cost });
            for (cauto& nextStep : nextSteps) {
                nodify(graph, coverage, grid, traveler, nextStep, destination);
            }
            break;
        }
    }
}

// not the smartest way to store a graph, I'm just remembering
Graph doublyLink(Graph& graph) {
    Graph doublyLinked = graph;
    for (auto& node : graph) {
        for (cauto& edge : node.second.edges) {
            cauto reverseEdge = std::pair{ node.first, edge.second };
            if (pContains(doublyLinked[edge.first].edges, reverseEdge)) {
                std::cout << "Already edge from " << edge.first << " to " << node.first << " of length " << edge.second;
            }
            else {
                doublyLinked[edge.first].edges.emplace_back(reverseEdge);
            }
        }
    }

    // validate
    for (auto& node : doublyLinked) {
        assert(node.second.edges.size() >= 1);
        if (node.second.edges.size() > 4) {
            assert(false);
        }
    }
    return doublyLinked;
}

using Visited = std::set<Vec2>;

int64_t maximumPathFromGraph(
    Graph& graph,
    Visited& visited,
    const Vec2& start,
    const Vec2& end,
    int64_t cost) {

    if (start == end) {
        return cost;
    }

    graph[start].visited = true;
    int64_t highest = 0;
    for (cauto& edge : graph[start].edges) {
        if (!graph[edge.first].visited) {
            highest = std::max(highest, maximumPathFromGraph(graph, visited, edge.first, end, cost+edge.second));
        }
    }
    graph[start].visited = false;
    return highest;
}



int64_t processNextStep(
    Grid<bool>& visited,
    const CharGrid& grid, 
    const Vec2& nextStep, 
    const Vec2& destination, 
    const bool slipperySlopes, 
    const int64_t longestPath);

// does memoizing require knowing where we've visited? that would be a ridiculous sized table
// the three step limit seems to ruin regular memoization; a best path a1-a2-a3 might not be best for
// a0-a1-a2-a3.
//  simpler problem, start upper left, go to lower left. wiggling around the 3 is necessary 
//  11311
//  11111 
int64_t maximumPath(
    const CharGrid& grid,
    Grid<bool>& visited,
    const Vec2& start, 
    const Vec2& destination,
    const bool slipperySlopes,
    int64_t numSteps) {  // switching computation order so we can print path

    if ((start.y == destination.y) && (start.x == destination.x)) {
        //std::cout << visited << std::endl;
        //for (int y = 0; y < gridHeight(grid); y++) {
        //    for (int x = 0; x < gridWidth(grid); x++) {
        //        if (visited[y][x]) {
        //            assert(grid[y][x] != '#');
        //        }
        //    }
        //}
        return numSteps;
    }
    visited[start.y][start.x] = true;

    int64_t longestPath = -1;

    cauto startCell = grid[start.y][start.x];
    if (!slipperySlopes || startCell == '.') {  // ha, I could have just transformed the map. me and my desire to keep sources of truth intact
        for (cauto& dir : dirs) {
            cauto nextStep = start + dir;
            longestPath = std::max(longestPath, processNextStep(visited, grid, nextStep, destination, slipperySlopes, numSteps+1));
        }
    }
    else {
        cauto nextStep = start +
            ((startCell == 'v') ? Vec2{0, 1} :
            (startCell == '<') ? Vec2{-1, 0} :
            (startCell == '^') ? Vec2{0, -1} :
            (startCell == '>') ? Vec2{1, 0} : Vec2{0, 0});
        assert(nextStep != start);
        longestPath = std::max(longestPath, processNextStep(visited, grid, nextStep, destination, slipperySlopes, numSteps+1));
    }
    visited[start.y][start.x] = false;
    return longestPath;
}

int64_t processNextStep(
    Grid<bool>& visited, 
    const CharGrid& grid, 
    const Vec2& nextStep, 
    const Vec2& destination,
    const bool slipperySlopes,
    const int64_t longestPath)
{
    if (inBounds(grid, nextStep)) {
        if (grid[nextStep.y][nextStep.x]!='#') {
            if (!visited[nextStep.y][nextStep.x]) {
                return maximumPath(grid, visited, nextStep, destination, slipperySlopes, longestPath);
            }
        }
    }
    return -1;
}


int64_t doTheThing(const std::string& input, const bool slipperySlopes) {
    cauto charGrid = parseGrid<char>(input);
    auto visited = createGrid<bool>(gridWidth(charGrid), gridHeight(charGrid));
    return maximumPath(charGrid, visited, { 1,0 }, { gridWidth(charGrid)-2, gridHeight(charGrid)-1 }, slipperySlopes, 0ll);
}

int64_t doTheThing2(const std::string& input, const bool slipperySlopes) {
    cauto rawGrid = parseGrid<char>(input);
    cauto charGrid = slipperySlopes ? rawGrid :
        gridTransform<char>(rawGrid, [](cauto cell) { 
            return ("^>v<"s.find(cell) != std::string::npos) ? '.' : cell; 
            });

    Graph graph({ { {1,0}, Node()},
        { { gridWidth(charGrid) - 2, gridHeight(charGrid) - 1 }, Node()}});
    auto coverage = charGrid;
    nodify(graph, coverage, charGrid, { 1,0 }, { 1,1 }, { gridWidth(charGrid) - 2, gridHeight(charGrid) - 1 });
    //std::cout << coverage << std::endl;
    std::cout << graph << std::endl;
    auto dGraph = slipperySlopes ? graph : doublyLink(graph);
    std::cout << dGraph << std::endl;

    Visited visited;
    return maximumPathFromGraph(dGraph, visited, { 1,0 }, { gridWidth(charGrid) - 2, gridHeight(charGrid) - 1 }, 0);
}

const std::string sampleInput = 
R"(#.#####################
#.......#########...###
#######.#########.#.###
###.....#.>.>.###.#.###
###v#####.#v#.###.#.###
###.>...#.#.#.....#...#
###v###.#.#.#########.#
###...#.#.#.......#...#
#####.#.#.#######.#.###
#.....#.#.#.......#...#
#.#####.#.#.#########v#
#.#...#...#...###...>.#
#.#.#v#######v###.###v#
#...#.>.#...>.>.#.###.#
#####v#.#.###v#.#.###.#
#.....#...#...#.#.#...#
#.#########.###.#.#.###
#...###...#...#...#.###
###.###.#.###v#####v###
#...#...#.#.>.>.#.>.###
#.###.###.#.###.#.#v###
#.....###...###...#...#
#####################.#
)";

TEST(Aoc23Tests, sampleInput_doTheThing_94) {
    ASSERT_EQ(94, doTheThing2(sampleInput, true));
}


TEST(Aoc23Tests, sampleInputNotSlippery_doTheThing2_154) {
    ASSERT_EQ(154, doTheThing2(sampleInput, false));
}

const std::string puzzleInput =
R"(#.###########################################################################################################################################
#.....###...#...#...#.......#...#.....###.....#...#...#...#.....###...#...###.......#.....#...#...#...###...................#...#...........#
#####.###.#.#.#.#.#.#.#####.#.#.#.###.###.###.#.#.#.#.#.#.#.###.###.#.#.#.###.#####.#.###.#.#.#.#.#.#.###.#################.#.#.#.#########.#
#.....#...#.#.#.#.#.#.....#.#.#.#...#.#...#...#.#.#.#.#.#.#.#...#...#...#.#...#.....#...#.#.#.#.#.#.#.#...#.................#.#.#...#.......#
#.#####.###.#.#.#.#.#####.#.#.#.###.#.#.###.###.#.#.#.#.#.#.#.###.#######.#.###.#######.#.#.#.#.#.#.#.#.###.#################.#.###.#.#######
#.#...#.#...#.#.#.#.#...#.#.#.#.###.#.#...#...#.#.#.#.#.#.#.#...#.#...#...#...#.#...#...#...#.#.#.#.#.#...#.#.....###...#...#.#.#...#.#...###
#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#.#####.#.#.#.#.#######.#.#.#.#.###.#.#.###.###.#.#.#.#.#.#.###.#.#.###
#...#.#.#...#.#.#.#.#.#.#.#.#.#...#.#.>.>.#...#.#.#.#.#.#.#.#...#...#.#.#...#.#.#.#.#.....#...#.#...#...#.#.#.#...#...#.#.#.#.#.#...#...#...#
#####.#.###.#.#.#.#v#.#.#.#.#.###.#.###v###.###.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#####.#.###.#######.#.#.#.#.###.###.#.#.#.#.###.#######.#
#.....#...#.#.#...#.>.#.#.#.#...#...###...#...#.#...#.#.#.#.#...#.>.>.#.#.#.#.#.#.#.#...#.#.###.#.......#.#...#...#.#...#.#...#...#.#.......#
#.#######.#.#.#####v###.#.#.###.#########.###.#.#####.#.#.#.###.#.#v###.#.#.#.#.#.#.#.#.#.#.###.#.#######.#######.#.#.###.#######.#.#.#######
#.#.......#...###...#...#.#.....#...###...###.#.....#.#.#.#.###...#.###.#.#.#.#...#.#.#.#.#.#...#.>.>.#...#.......#.#.###...#.....#.#...#...#
#.#.#############.###.###.#######.#.###.#####.#####.#.#.#.#.#######.###.#.#.#.#####.#.#.#.#.#.#####v#.#.###.#######.#.#####.#.#####.###.#.#.#
#.#.#.........#...###...#...#.....#.#...#####...#...#.#.#.#.#.....#...#.#.#.#.#.....#.#.#.#.#.....#.#...#...###...#.#...#...#.###...#...#.#.#
#.#.#.#######.#.#######.###.#.#####.#.#########.#.###.#.#.#.#.###.###.#.#.#.#.#.#####.#.#.#.#####.#.#####.#####.#.#.###.#.###.###.###.###.#.#
#...#.......#...###...#.#...#.#...#...#.......#...###.#.#...#...#.#...#.#.#.#.#.#.>.>.#...#.......#.....#.....#.#.#.#...#...#...#.#...#...#.#
###########.#######.#.#.#.###.#.#.#####.#####.#######.#.#######.#.#.###.#.#.#.#.#.#v###################.#####.#.#.#.#.#####.###.#.#.###.###.#
###...#####...#####.#.#.#...#...#...###.#.....#.......#.#.......#...###...#...#...#...............#.....#.....#.#.#.#.#...#...#.#.#.###.#...#
###.#.#######.#####.#.#.###.#######.###.#.#####.#######.#.#######################################.#.#####.#####.#.#.#.#.#.###.#.#.#.###.#.###
#...#.###...#.....#.#.#.#...#...#...#...#.....#...#...#.#...#...#.....#.....#.....#...#...........#.#...#.......#.#.#.#.#.....#...#...#.#...#
#.###.###.#.#####.#.#.#.#.###.#.#.###.#######.###.#.#.#.###.#.#.#.###.#.###.#.###.#.#.#.###########.#.#.#########.#.#.#.#############.#.###.#
#...#.....#.......#.#.#.#.###.#.#.....#.....#.#...#.#.#...#...#...#...#.#...#...#...#...#.........#.#.#...#.....#...#...#...........#...#...#
###.###############.#.#.#.###.#.#######.###.#.#.###.#.###.#########.###.#.#####.#########.#######.#.#.###.#.###.#########.#########.#####.###
###...#.............#.#.#.#...#.#.......###...#...#.#.#...#.........###.#.#...#...#.....#.#.......#...###...#...#.....###.......###.....#.###
#####.#.#############.#.#.#.###.#.###############.#.#.#.###.###########.#.#.#.###.#.###.#.#.#################.###.###.#########.#######.#.###
#.....#.#.........#...#...#...#.#...........#...#...#...###.....#...#...#.#.#...#...###...#.....#...#.........#...#...#.....#...#...###.#...#
#.#####.#.#######.#.#########.#.###########.#.#.###############.#.#.#.###.#.###.###############.#.#.#.#########.###.###.###.#.###.#.###.###.#
#.....#.#.......#.#...###.....#.............#.#...#...#####...#...#.#...#.#.#...#...###.........#.#.#...........#...###...#.#.....#...#...#.#
#####.#.#######.#.###.###.###################.###.#.#.#####.#.#####.###.#.#.#.###.#.###v#########.#.#############.#######.#.#########.###.#.#
#.....#.#...#...#.....#...#.....#.......#...#.#...#.#...#...#.......#...#...#.#...#...>.>.#...#...#.....#...#.....###.....#...........###...#
#.#####.#.#.#v#########.###.###.#.#####.#.#.#.#.###.###.#.###########.#######.#.#######v#.#.#.#.#######.#.#.#.#######.#######################
#.......#.#.#.>.......#.....###...#.....#.#.#.#.#...#...#...#...#...#.......#.#.....###.#.#.#...#.....#.#.#...###...#.......................#
#########.#.#v#######.#############.#####.#.#.#.#.###.#####.#.#.#.#.#######.#.#####.###.#.#.#####.###.#.#.#######.#.#######################.#
#.......#.#...###.....#...#...#...#.###...#...#.#...#.....#...#.#.#.....#...#.......#...#.#.#.....###...#.......#.#.#...#...................#
#.#####.#.#######.#####.#.#.#.#.#.#v###.#######.###.#####.#####.#.#####.#.###########.###.#.#.#################.#.#.#.#.#.###################
#.....#.#.......#...#...#.#.#...#.>.>...#.......###...#...#.....#.....#.#.#.........#...#...#.........#.........#.#.#.#.#.....#.........#...#
#####.#.#######.###.#.###.#.#######v#####.###########.#.###.#########.#.#.#.#######.###.#############.#.#########.#.#.#.#####v#.#######.#.#.#
#.....#.........#...#...#.#.#.......#.....#...###...#.#.###.....#...#.#.#.#.#.....#.#...###...#...#...#...#.....#.#.#.#.###.>.#.#.......#.#.#
#.###############.#####.#.#.#.#######.#####.#.###.#.#.#.#######v#.#.#.#.#.#.#.###.#.#.#####.#.#.#.#.#####.#.###.#.#.#.#.###.#v#.#.#######.#.#
)"
R"(#.....#...#...###.....#.#.#.#.......#.....#.#.....#.#.#.....#.>.>.#...#...#...###.#.#.#.....#...#.#.#...#...#...#.#.#.#.....#...#.......#.#.#
#####.#.#.#.#.#######.#.#.#.#######.#####.#.#######.#.#####.#.#v#################.#.#.#.#########.#.#.#.#####.###.#.#.#################.#.#.#
#.....#.#.#.#...#...#...#...#.......###...#...###...#.#.....#.#.#...###...#...#...#...#.#...#...#...#.#.#...#.#...#.#...#.......#.....#...#.#
#.#####.#.#.###.#.#.#########.#########.#####.###.###.#.#####.#.#.#.###.#.#.#.#.#######.#.#.#.#.#####.#.#.#.#v#.###.###.#.#####.#.###.#####.#
#.....#.#...###...#.........#.........#...#...#...#...#.......#...#...#.#.#.#.#.......#.#.#.#.#...#...#.#.#.>.>.###...#.#.#...#...###.......#
#####.#.###################.#########.###.#.###.###.#################.#.#.#.#.#######.#.#.#.#.###.#.###.#.###v#######.#.#.#.#.###############
###...#...#...###...........#.........###...###...#.#.............#...#.#...#.#...#...#.#.#.#...#...#...#.###.......#.#.#.#.#...###.........#
###.#####.#.#.###.###########.###################.#.#.###########.#.###.#####.#.#.#.###.#.#.###.#####.###.#########.#.#.#.#.###.###.#######.#
#...#...#.#.#.....#...#.....#.......#...........#.#.#.#...#.....#...###.#...#...#...###...#.....#.....#...#.........#...#...###.....#.......#
#.###.#.#.#.#######.#.#.###.#######.#.#########.#.#.#.#.#.#.###.#######.#.#.#####################.#####.###.#########################.#######
#...#.#...#.........#.#...#.......#...#.........#.#.#.#.#...#...#.....#...#...........#.....#...#.......###...........#...###.........#.....#
###.#.###############.###.#######.#####.#########.#.#.#.#####.###.###.###############.#.###.#.#.#####################.#.#.###.#########.###.#
#...#.#...............#...#.......#...#...#...###.#.#.#.#...#.....#...###...#.......#.#...#.#.#.###...#...#...........#.#.#...#...#...#...#.#
#.###.#.###############.###.#######.#.###.#.#.###.#.#.#.#.#.#######.#####.#.#.#####.#.###.#.#.#.###.#.#.#.#.###########.#.#.###.#.#.#.###.#.#
#.....#...............#...#.#...#...#.....#.#...#.#.#...#.#...#...#.#...#.#.#...###...#...#.#.#.#...#.#.#.#...#...#...#.#.#.....#...#...#.#.#
#####################.###.#.#.#.#.#########.###.#.#.#####.###.#.#.#.#.#.#.#.###v#######.###.#.#.#.###.#.#.###.#.#.#.#.#.#.#############.#.#.#
#.......#.............#...#.#.#.#...#...#...#...#...#...#...#...#...#.#...#...>.>.#...#...#.#.#.#...#...#.....#.#.#.#.#.#...#.........#...#.#
#.#####.#.#############.###.#.#.###v#.#.#.###.#######.#.###.#########.#########v#.#.#.###.#.#.#.###v###########.#.#.#.#.###.#.#######.#####.#
#.....#.#.........#####...#.#.#.#.>.>.#.#...#.###.....#.###.........#...#.....#.#.#.#...#.#.#.#...>.>.#...#...#.#.#.#.#.#...#.....#...#.....#
#####.#.#########.#######.#.#.#.#.#v###.###.#.###.#####.###########.###.#.###.#.#.#.###.#.#.#.#####v#.#.#.#.#.#.#.#.#.#.#.#######v#.###.#####
#.....#.###.....#...###...#.#.#.#.#...#...#.#...#...#...#...........###...#...#.#.#...#...#.#.#.....#.#.#.#.#.#.#.#.#.#.#.....#.>.#...#.....#
#.#####.###.###.###.###.###.#.#.#.###.###.#.###.###.#.###.#################.###.#.###.#####.#.#.#####.#.#.#.#.#.#.#.#.#.#####.#.#v###.#####.#
#.....#...#...#.#...#...#...#.#.#.###...#.#.###...#.#.###.......#.........#...#.#.....#.....#.#.....#.#.#.#.#.#.#.#.#.#.#.....#.#...#.......#
#####.###.###.#.#v###.###.###.#.#.#####.#.#.#####.#.#.#########.#.#######.###.#.#######.#####.#####.#.#.#.#.#.#.#.#.#.#.#.#####.###.#########
#...#.#...#...#.#.>.#...#...#.#...#.....#.#.#.....#.#.#...#...#.#.#.....#.....#.......#...#...#.....#...#...#.#.#...#...#...#...###.......###
#.#.#.#.###.###.#v#.###.###.#.#####.#####.#.#.#####.#.#.#.#.#.#.#.#.###.#############.###.#.###.#############.#.###########.#.###########.###
#.#...#...#...#.#.#.....###...#...#.....#.#.#...###.#.#.#.#.#.#.#...#...#...#.........#...#.###.....#.......#...###.....###...#.........#...#
#.#######.###.#.#.#############.#.#####.#.#.###.###.#.#.#.#.#.#v#####.###.#.#.#########.###.#######.#.#####.#######.###.#######.#######.###.#
#.....#...#...#.#.......#.....#.#.#.....#...###...#.#.#.#.#.#.>.>.#...###.#.#.........#...#.#.......#.....#.###...#.#...#.......#.....#.#...#
#####.#.###.###.#######.#.###.#.#.#.#############.#.#.#.#.#.###v#.#.#####.#.#########.###.#.#.###########.#.###.#.#.#.###.#######.###.#.#.###
#.....#...#...#...#.....#...#...#...#...###...#...#.#.#.#.#.#...#...###...#.......#...#...#.#.....#.......#...#.#.#.#...#.........#...#.#...#
#.#######.###.###.#.#######.#########.#.###.#.#.###.#.#.#.#.#.#########.#########.#.###.###.#####.#.#########.#.#.#.###.###########.###.###.#
#.....#...#...#...#.....###...........#...#.#...#...#...#...#.....###...#...#####...###.#...#.....#.#.........#.#...#...#...#.......###.....#
#####.#.###.###.#######.#################.#.#####.###############.###.###.#.###########.#.###.#####.#.#########.#####.###.#.#.###############
#.....#.....###.#.......#.......#.........#...#...#...#...###...#...#.....#.....#.....#...###.......#...#...#...#...#.#...#.#...............#
#.#############.#.#######.#####.#.###########.#.###.#.#.#.###.#.###.###########.#.###.#################.#.#.#.###.#.#.#.###.###############.#
#.#...#...#...#...#.....#.....#.#...........#...###.#.#.#.#...#.#...#.........#...#...#...#...#...#...#...#...#...#...#...#.................#
#.#.#.#.#v#.#.#####.###.#####.#.###########.#######.#.#.#.#.###.#.###.#######.#####.###.#.#.#.#.#.#.#.#########.#########.###################
#.#.#...#.>.#.#...#.#...#...#.#.#...###.....#.....#.#...#.#...#...###...#...#.......###.#.#.#.#.#.#.#.#.........#...#...#...#...............#
#.#.#####v###.#.#.#.#.###.#.#.#.#.#.###v#####.###.#.#####.###.#########.#.#.###########.#.#.#.#.#.#.#.#.#########.#.#.#.###.#.#############.#
#.#.#.....###.#.#.#.#...#.#.#.#.#.#...>.>.#...#...#.....#.#...###...###.#.#.###.....#...#.#.#.#.#.#.#.#...........#...#...#.#.#.............#
#.#.#.#######.#.#.#.###.#.#.#.#.#.#####v#.#.###.#######.#.#.#####.#.###.#.#.###.###.#.###.#.#.#.#.#.#.###################.#.#.#.#############
#...#.......#...#.#.#...#.#.#.#...###...#...###...#.....#...###...#...#...#...#.#...#...#.#.#.#.#.#.#.#...#...#...........#...#.............#
###########.#####.#.#.###.#.#.#######.###########.#.###########.#####.#######.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#.###########################.#
#...........#...#...#...#.#.#.#.......#...###.....#...#####...#.#.....#...#...#.#.#...#.#.#.#.#.#.#.#.#.#.#.#.#...###...#...###...#...#...#.#
#.###########.#.#######.#.#.#.#.#######.#.###.#######v#####.#.#.#.#####.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###v###.#.#.#.###.#.#v#.#.#.#.#
#...#.........#.......#.#.#...#...#.....#...#...#...>.>.###.#...#.#...#.#...#...#.#.#.#.#.#.#.#.#...#.#.#...#...>.>...#.#.#.#...#.>.#.#.#.#.#
###.#.###############.#.#.#######.#.#######.###.#.###v#.###.#####.#.#.#.#####.###.#.#.#.#.#.#.#.#####.#.#########v#####.#.#.#.#####v#.#.#.#.#
###.#.#...............#...###...#...#...#...#...#.#...#...#.#.....#.#.#.....#...#.#.#.#.#.#.#.#.....#.#.###...#...#.....#.#...#.....#...#.#.#
###.#.#.#####################.#.#####.#.#.###.###.#.#####.#.#.#####.#.#####v###.#.#.#.#.#.#.#.#####.#.#.###.#.#.###.#####.#####.#########.#.#
###...#...........#...........#.......#...###.....#.....#...#.#...#.#.#...>.>.#.#.#.#...#...#.#...#.#.#.#...#...###.......#...#.........#.#.#
#################.#.###################################.#####.#.#.#.#.#.###v#.#.#.#.#########.#.#.#.#.#.#.#################.#.#########.#.#.#
###...###.........#...#.........#...#...#.......#####...#.....#.#.#.#.#.#...#.#.#...#...#...#...#...#...#.......#...#.......#...........#...#
###.#.###.###########.#.#######.#.#.#.#.#.#####.#####.###.#####.#.#.#.#.#.###.#.#####.#.#.#.###################.#.#.#.#######################
#...#.....#...###...#...###...#...#...#...#...#.#.....###.......#...#.#.#...#...#...#.#.#.#.#.....#...#####...#...#.#.................#...###
#.#########.#.###.#.#######.#.#############.#.#.#.###################.#.###.#####.#.#.#.#.#.#.###.#.#.#####.#.#####.#################.#.#.###
#...........#...#.#...#...#.#.###...#.......#...#.......#...###.....#.#.###...#...#...#...#.#.#...#.#...#...#.#.....#.................#.#.###
###############.#.###.#.#.#.#.###.#.#.#################.#.#.###.###.#.#.#####.#.###########.#.#.###.###.#.###.#.#####.#################.#.###
#...........#...#.#...#.#...#.....#.#.........#.........#.#.....#...#.#...#...#.#...........#.#...#.#...#...#.#.#...#.......###.........#...#
#.#########.#.###.#.###.###########.#########.#.#########.#######.###.###.#.###.#.###########.###.#.#.#####.#.#v#.#.#######v###.###########.#
#...#.....#...#...#...#...#.......#...........#.......#...#...#...###.....#.....#.........###...#...#.......#.>.>.#.#...#.>.###.#.....#...#.#
###.#.###v#####.#####.###.#.#####.###################.#.###.#.#.#########################.#####.###############v###.#.#.#.#v###.#.###.#.#.#.#
###...###.>.###.#.....###...#...#.#...#...###...#...#...#...#...#.....#.........#.........#...#.....#.......#...#...#.#...#.#...#...#...#...#
#########v#.###.#.###########.#.#.#.#.#.#.###.#.#.#.#####v#######.###.#.#######.#.#########.#.#####.#.#####.#.###.###.#####.#.#####.#########
#.........#.....#.#...#...#...#...#.#.#.#...#.#.#.#.#...>.>.###...#...#.......#.#.......#...#.......#.....#.#...#...#...#...#.#...#...###...#
#.###############.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.###v#.###.###.#########.#.#######.#.###############.#.###.###.###.#.###.#.#.###.###.#.#
#.........#.......#.#.#.#.#.....#...#...#...#.#.#.#.#.#...#...#...#...#...#...#.#...#...#.....###...###...#.#...###...#.#.....#.#.#...#...#.#
#########.#.#######.#.#.#.#####.#.#######.###.#.#.#.#.#.#####.###.###.#.#.#.###.#.#.#.#######.###.#.###.###.#.#######.#.#######.#.#.###.###.#
#.........#...#...#.#.#.#.###...#.#.....#...#.#.#.#...#...###...#.#...#.#.#...#.#.#.#.###...#...#.#.....###.#.....#...#...#.....#.#...#.#...#
#.###########.#.#.#.#.#.#.###v###.#.###.###.#.#.#.#######.#####.#.#.###.#.###.#.#.#.#v###.#.###.#.#########.#####.#.#####.#.#####.###.#.#.###
#.#.........#.#.#.#.#.#.#.#.>.>...#.#...###...#.#.#.....#.....#.#.#.#...#.#...#...#.>.>.#.#.#...#.........#.#.....#...#...#.....#.....#.#...#
#.#.#######.#.#.#.#.#.#.#.#.#v#####.#.#########.#.#.###.#####.#.#.#.#.###.#.#########v#.#.#.#.###########.#.#.#######.#.#######.#######.###.#
#...#.......#...#...#.#.#.#.#.#.....#.......#...#.#...#.#...#.#.#.#.#...#.#.#.........#...#.#...#.........#...#...###.#.###...#...#...#.#...#
#####.###############.#.#.#.#.#.###########.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#############.###.#.#############.#.###.#.###.#.###.#.#.#.#.###
#.....#...#.......###...#.#.#...###.........#.....###.#...#...#...#.#...#.#.#...#...#...###.....#.........###...#...#...#...#.###...#...#...#
#.#####.#.#.#####.#######.#.#######.#################.#############.#.###.#.###.#.#.#.#.#################.###.#####.#####.###.#############.#
#.......#...#...#.#.......#...#.....#...#...#...#...#.......#.....#.#.#...#.#...#.#...#.......#...........#...#.....#...#...#...............#
#############.#.#.#.#########.#.#####.#.#.#.#.#.#.#.#######.#.###.#.#.#.###.#.###.###########.#.###########.###.#####.#.###.#################
#...........#.#.#.#.#...#.....#.#...#.#...#...#...#...#.....#.#...#...#.....#.....#.........#.#.............#...#...#.#.#...#...#...###...###
#.#########.#.#.#.#.#.#.#.#####.#.#.#.###############.#.#####.#.###################.#######.#.###############.###.#.#.#.#.###.#.#.#.###.#.###
#.........#...#...#...#.#.....#...#...###.....#.......#.......#.........#...........#.....#...###...#.........#...#...#.#.....#...#.....#...#
#########.#############.#####.###########.###.#.#######################.#.###########.###.#######.#.#.#########.#######.###################.#
#.........#.....#.....#.#...#.#...........###...#.............#...#.....#.............#...#...#...#.#...###...#.......#...#...#...........#.#
#.#########.###.#.###.#.#.#.#.#.#################.###########.#.#.#.###################.###.#.#.###.###v###.#.#######.###.#.#.#.#########.#.#
#.....#...#.#...#.#...#.#.#...#.......#.....#...#...........#...#...#...###...#...#.....###.#.#...#.#.>.>.#.#...#...#.#...#.#.#.......###...#
#####.#.#.#.#.###.#.###.#.###########.#.###.#.#.###########.#########.#.###.#.#.#.#.#######.#.###.#.#.###.#.###.#.#.#.#.###.#.#######.#######
#.....#.#...#...#.#...#...#.....#.....#.###...#...###...#...#.......#.#.#...#.#.#.#...#...#.#.#...#.#.###.#.#...#.#...#.#...#...#...#.......#
#.#####.#######.#.###.#####.###.#.#####.#########.###.#.#v###.#####.#.#.#.###.#.#.###.#.#.#.#.#.###.#.###.#.#.###.#####.#.#####.#.#.#######.#
#.#.....#...#...#.#...#...#...#.#.......###.......#...#.>.>.#.....#.#.#.#.#...#.#.#...#.#.#.#.#.#...#...#.#.#...#.#.....#.#.....#.#.........#
#.#.#####.#.#.###.#.###.#.###.#.###########.#######.#######.#####.#.#.#.#.#.###.#.#v###.#.#.#.#.#.#####.#.#.###.#.#.#####.#.#####.###########
#...#.....#...#...#.#...#...#.#.#...#...#...###...#.......#...#...#...#.#.#...#.#.>.>.#.#.#.#...#...#...#.#...#.#.#.#.....#.....#...........#
#####.#########.###.#.#####.#.#.#.#.#.#.#.#####.#.#######.###.#.#######.#.###.#.#####.#.#.#.#######.#.###.###.#.#.#.#.#########.###########.#
#...#.....#...#...#.#...#...#.#.#.#.#.#.#...#...#.#...#...###.#.......#.#.#...#.....#.#.#.#.....#...#...#.#...#...#.#.#...###...#...........#
#.#.#####.#.#.###.#.###.#.###.#.#.#.#.#.###v#.###.#.#.#.#####.#######.#.#.#.#######.#.#.#.#####.#.#####.#.#.#######.#.#.#.###.###.###########
#.#.......#.#...#.#.#...#.#...#.#.#.#.#.#.>.>.#...#.#.#.#.....#...#...#...#.#...#...#...#.....#.#...#...#.#.......#...#.#.#...###...........#
#.#########.###.#.#.#.###.#.###.#.#.#.#.#.#####.###.#.#.#.#####.#.#.#######.#.#.#.###########.#.###.#.###.#######.#####.#.#.###############.#
#.....#...#.###...#.#...#.#.#...#.#...#.#.....#.#...#.#.#.#...#.#.#.......#.#.#.#.###.........#.#...#...#...#.....#.....#.#...#...###.......#
#####.#.#.#.#######.###.#.#.#.###.#####.#####.#.#.###.#.#.#.#.#.#.#######.#.#.#.#.###.#########.#.#####.###.#.#####.#####.###.#.#.###v#######
#.....#.#.#.....#...#...#.#.#...#.....#...#...#.#...#.#.#.#.#.#.#...#...#.#.#.#.#...#.#...#...#.#...#...#...#...#...#...#.....#.#.#.>.###...#
#.#####.#.#####.#.###.###.#.###.#####.###.#.###.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#.###.#####.#.###.#.#######.#.#.#v###.#.#
#.......#.......#.....###...###.......###...###.....#...#...#...###...#...#...#.....#...#...#...###...###.......#.....#.........#...#.....#.#
###########################################################################################################################################.#
)";


TEST(Aoc23Tests, puzzleInput_doTheThing) {
    ASSERT_EQ(2166, doTheThing2(puzzleInput, true));
}


TEST(Aoc23Tests, puzzleInput_doTheThing2) {
    // 4999 is too low
    // 5009 wrong
    // 5010 wrong
    // 5011 wrong   
    ASSERT_EQ(0, doTheThing2(puzzleInput, false));
}