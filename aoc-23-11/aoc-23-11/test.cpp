#include "pch.h"

#include <functional>
#include <optional>
#include <vector>
#include <string>

/*
	transform that is non-destructive, operates on whole container, and is ergonomic
	and always returns vector. It would be cool if there's a way to get it to return
*/
template<typename ReturnContainer, typename IngestContainer, typename UnaryOperation>
[[nodiscard]] ReturnContainer qTransform(const IngestContainer& c, UnaryOperation unaryOp) {
	ReturnContainer newC;
	std::transform(c.begin(), c.end(), std::back_inserter(newC), unaryOp);
	return newC;
}

// not to be confused with qsort :P
template<typename Container>
[[nodiscard]] Container qSort(const Container& c) {
	Container newC = c;
	std::sort(newC.begin(), newC.end());
	return newC;
}


template<typename Container>
Container::value_type qMaxElementValue(const Container& c) {
	return *std::max_element(c.begin(), c.end());
}

template<typename Container>
bool qAllOf(const Container& c, std::function<bool(typename Container::value_type)> predicate) {
	return std::all_of(c.begin(), c.end(), predicate);
}

template<typename Container>
bool qAnyOf(const Container& c) {
	return std::any_of(c.begin(), c.end());
}

template<typename Container>
int64_t qCount(const Container& c, typename Container::value_type match) {
	return static_cast<int64_t>(std::count(c.begin(), c.end(), match));
}

template<typename Container>
int64_t qCountIf(const Container& c, std::function<bool(typename Container::value_type)> predicate) {
	return static_cast<int64_t>(std::count_if(c.begin(), c.end(), predicate));
}


std::vector<std::string> split(const std::string& str, char delim) {
	std::stringstream strstream(str);
	std::vector<std::string> result;
	for (std::string line; std::getline(strstream, line, delim);) {
		result.emplace_back(line);
	}
	return result;
}

struct XY {
	int64_t x = 0;
	int64_t y = 0;
	XY operator+(const XY& xy) const { return XY{ x + xy.x, y + xy.y }; }
	bool operator==(const XY& xy) const { return x == xy.x && y == xy.y; }
	XY operator*(int scalar) const {
		return XY{ x * scalar, y * scalar };
	}
	static int64_t manhattanDistance(const XY & xy1, const XY & xy2) {
		return abs(xy1.x - xy2.x) + abs(xy1.y - xy2.y);
	}
};


std::vector<std::vector<bool>> gridify(const std::string& input) {
	auto lines = split(input, '\n');
	std::vector<std::vector<bool>> result;
	for (auto& line : lines) {
		std::vector<bool> gridLine;
		for (auto& c : line) {
			gridLine.emplace_back(c == '#' ? true : false);
		}
		result.emplace_back(gridLine);
	}
	return result;
}

std::vector<std::vector<bool>> expandUniverse(const std::string& input) {
	auto smallUniverse = gridify(input);
	std::vector<std::vector<bool>> tallUniverse;
	for (auto& row : smallUniverse) {
		tallUniverse.emplace_back(row);
		if (qAllOf(row, [](bool cell) { return !cell; })) {
			tallUniverse.emplace_back(row);
		}
	}
	// widening is more challenging
	std::vector<int> emptyCols;
	std::vector<std::vector<bool>> wideUniverse(tallUniverse.size());
	for (int col = 0; col < tallUniverse[0].size(); col++) {
		const bool duplicate = qAllOf(tallUniverse, [&col](auto row) { return !row[col]; });
		for (int row = 0; row < tallUniverse.size(); row++) {
			wideUniverse[row].emplace_back(tallUniverse[row][col]);
			if (duplicate) {
				wideUniverse[row].emplace_back(tallUniverse[row][col]);
			}
		}
	}
	return wideUniverse;
}

// in hindsight would it have been smarter to store galaxies as coordinates
// in the first place and just increase those?
// (Hah, just got to part 2. So, yes.)
std::vector<XY> getGalaxies(std::vector<std::vector<bool>> universe) {
	std::vector<XY> galaxies;
	for (int row = 0; row < universe.size(); row++) {
		for (int col = 0; col < universe[0].size(); col++) {
			if (universe[row][col]) {
				galaxies.emplace_back(XY{ col,row });
			}
		}
	}
	return galaxies;
}

std::vector<XY> expandGalaxies(const std::vector<XY>& galaxies, const int scale) {
	const auto xs = qTransform<std::vector<int64_t>>(galaxies, [](const XY& xy) { return xy.x; });
	const auto ys = qTransform<std::vector<int64_t>>(galaxies, [](const XY& xy) { return xy.y; });
	const auto sortedXs = qSort(xs);
	const auto sortedYs = qSort(ys);
	std::vector<int64_t> emptyXs;
	std::vector<int64_t> emptyYs;

	int64_t prevX = -1;
	for (auto x : sortedXs) {
		// if there's a 0; 0-(-1) = 1; don't add any spaces
		// if there's a 1; 1-(-1) = 2; add a col at 0
		for (int64_t emptyX = prevX + 1; emptyX < x; emptyX++) {
			emptyXs.emplace_back(emptyX);
		}
		prevX = x;
	}

	int64_t prevY = -1;
	for (auto y : sortedYs) {
		for (int64_t emptyY = prevY + 1; emptyY < y; emptyY++) {
			emptyYs.emplace_back(emptyY);
		}
		prevY = y;
	}

	std::vector<XY> newGalaxies;
	for (const auto& galaxy : galaxies) {
		int64_t emptyColsBefore = qCountIf(emptyXs, [&galaxy](int64_t x) { return x < galaxy.x; });
		int64_t emptyRowsBefore = qCountIf(emptyYs, [&galaxy](int64_t y) { return y < galaxy.y; });
		newGalaxies.emplace_back(XY{ galaxy.x + (scale-1) * emptyColsBefore, galaxy.y + (scale-1) * emptyRowsBefore });
	}

	return newGalaxies;
}

int64_t sumDistances(std::vector<XY> galaxies) {
	int64_t sum = 0;
	for (int i = 0; i < std::ssize(galaxies); i++) {
		for (int j = i + 1; j < std::ssize(galaxies); j++) {
			sum += XY::manhattanDistance(galaxies[i], galaxies[j]);
		}
	}
	return sum;
}

int64_t doTheThing(const std::string& input) {
	const auto universe = expandUniverse(input);
	const auto galaxies = getGalaxies(universe);
	return sumDistances(galaxies);
}


int64_t doTheThing2(const std::string& input, const int scale) {
	const auto universe = gridify(input);
	const auto galaxies = getGalaxies(universe);
	const auto newGalaxies = expandGalaxies(galaxies, scale);
	return sumDistances(newGalaxies);
}

const std::string sampleInput = 
R"(...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....
)";

const std::string expandedSampleInput =
R"(....#........
.........#...
#............
.............
.............
........#....
.#...........
............#
.............
.............
.........#...
#....#.......
)";

TEST(TestCaseName, sampleInput_expandUniverse) {
	ASSERT_EQ(gridify(expandedSampleInput), expandUniverse(sampleInput));
}

TEST(TestCaseName, sampleInput_doTheThing1) {
	ASSERT_EQ(374, doTheThing(sampleInput));
}

TEST(TestCaseName, sampleInput_doTheThing2_scale2) {
	ASSERT_EQ(374, doTheThing2(sampleInput, 2));
}

TEST(TestCaseName, sampleInput_doTheThing2_scale10) {
	ASSERT_EQ(1030, doTheThing2(sampleInput, 10));
}

TEST(TestCaseName, sampleInput_doTheThing2_scale100) {
	ASSERT_EQ(8410, doTheThing2(sampleInput, 100));
}

const std::string puzzleInput1 =
R"(................................................#.........#............................................#....................................
..#.............#......#.............................................#...........................................................#..........
..............................................................#..............................#..............................................
.................................................................................................................#..........................
...........#...........................#...............................................#..................................#.............#...
............................#..................#.....#..........................#...........................................................
..................................#................................#........................................................................
...........................................................................#................................................................
.....#...................................#......................................................#.......................#...........#.....#.
.....................#........#....................#....................................................#...................................
......................................................................#.....................................................................
...........................................................#.................................#..............................................
........#..................#....................#....................................................#......................................
#.............#....................................................#..............#.............................#...........................
...................#.............#...................................................................................#...............#......
.............................................................................#.............................................................#
.........................................................................................................#..................................
....#...........................................................................................#...........................#.....#.........
.....................#.......................#.........#....................................................................................
#............#.........................................................................#....................#...............................
................................#..................#...........#......#............................#...................#.......#............
.......................................................................................................................................#....
...................................................................................#........................................................
.........................#.............#...................................................................................#................
............................................................................................................................................
..........#..............................................................#......#.........#..........#......................................
)"
R"(............................................................................................................................................
.................................................................................................#............................#.............
................#...............................#............#.....................#........................................................
.#........................#..........................#......................................................#.......................#.......
.......#....................................#................................#..............................................................
.................................#.....................................#..................................................................#.
........................................................#.............................#...............................#........#............
.....................#...................#.....#...............#............................................................................
.............#...................................................................................................#..........................
................................................................................................#.....#...............................#.....
.................#................#................#........................................................................................
.#..........................#.............................#.......#.......#................................................................#
.............................................#.............................................................#................................
...........#.................................................................................#...............................#..............
.....................#.................................#.......#..................................................................#.....#...
.......#..............................#..............................................................#......................................
#...............................#.....................................#...............#........................#.......#....................
...........................................................................#.....#.........................................................#
...........................................................................................#................................................
........................................................#................................................#.......................#..........
.........#............#............................................#.................................................#.....#................
............................................................................................................................................
......................................#......#........................................................#.........#...........................
.............#.....#......#..........................#......................................................................................
......#................................................................................................................................#....
.............................................................................................................#..............................
..#.......#.............................#.....................#..................#........#.................................................
............................................................................................................................................
......................................................................................#...............................#.....................
..................#...........................#...........................#.........................#.........................#.............
............................................................................................................................................
......................................#..................................................#.........................................#........
.......................#.....#................................................................#.............#............#..................
.....#.............................................#.............#..........................................................................
.............#...........................................................#.......#..................................#...........#...........
.................................#..........................................................................................................
.............................................#...........#..................................................................................
.......#......................................................#............................#.........#........#.............................
.....................#................................................#...........................................................#.........
...............#...................#...............#.......................................................................#................
#..........................#......................................................................#.........................................
.............................................................................#..............................................................
...............................#......#.................#..............................................#..........#.........................
...........................................................................................................................................#
.................#......#.......................#....................................#.....#..............................#.................
.........#.............................................................#..................................#.................................
....................................................#............#............#.........................................................#...
..#.........................................................#........................................................#..........#...........
............................................................................................................................................
............................................................................................................................................
.......#...........................#..............................................................#.........................................
....................#...................................#................................................................#..................
..............................#.............................................................................................................
..#......................#.............................................#........#..........#................................................
..........#.............................#......................#................................................................#...........
.....................................................................................................#......................................
......................#.............................................................................................#......................#
#................#..................................#........................................#.................#............................
...................................#......#.......................#...........#..........................................#.............#....
............................................................................................................................................
..........#..............................................#..................................................................................
............................................................................................................................................
....................#......#..........#.......................#......#....................#..........#.......#..................#...........
...#.........................................................................#..............................................................
..................................................................................#..............#..........................................
........#.......................#..........#................................................................................................
..............#...........................................................................................#.................................
................................................................#.......................................................................#...
.......................#................#.....................................................................#.............................
....#............#............#.................................................................#.....#.....................................
...................................................................................................................#........................
...........................................#..............................................................................#.................
.......#.........................................#.......#.......#.....#...............................................................#....
................................................................................#...........#.....................................#.........
...........#.....................................................................................#..........................................
..............................................................#.............................................................................
...............#.........#..........#........................................................................#..............................
...........................................#......................................................................#......#..................
....#...............#.......................................................................................................................
......................................................................................#..............................................#......
...............................................#...............#..............#.................#...........................................
.#.........................................................................................#.........................#......................
................#......#................#................................#..........................#...........#...........................
......#......................#.....................#.......#................................................................................
.............................................#...........................................................#...............#.....#........#...
...........#.........................................................................#......................................................
............................................................................#...............................................................
.........................................................................................#............................#.....................
...................#...................#.....................#....................................#.............#...........................
.................................#..........................................................................................................
.......#......#...........#..................................................................................................#.....#........
.......................................................................#..............#........#.............#..............................
......................#..................#......#..............#..............#.....................................#..................#....
..........................................................................................#.............#...................................
.........#..........................................#..............#.......................................................#................
.............................#..............................................................................................................
.............................................#...................................#..........................................................
................#..................#........................................#......................................#........................
....#.................#.................#.............................................#.................................#..................#
............................................................#.........#..................................#..................................
......................................................#...................................#.................................................
.................................#..................................................................#.......................................
.................................................#...................................................................................#......
............................................................................................................................................
..................#.............................................#.............#.........................#................#..................
.........#.................................................#...........#.............#........#..............#............................#.
...................................#.........................................................................................#..............
............................................................................................................................................
#.....................#...................................................#.......#...............................#.........................
..............................#.................#........#..........................................................................#.......
..............#........................................................................#....................................................
...........................................#.............................................................#..............................#...
.................................#...................................................................................#...........#..........
...........#.......#.......#...........................#.....#................#......................#........#.............................
)";

TEST(TestCaseName, puzzleInput_doTheThing1) {
	ASSERT_EQ(0, doTheThing(puzzleInput1));
}

TEST(TestCaseName, puzzleInput_doTheThing2) {
	ASSERT_EQ(0, doTheThing2(puzzleInput1, 1000000));
}